SDK_VER="10.2"
DEVICE_VER="7"

BUILD_DIR="Build/Intermediates/CodeCoverage/Products/"
TESTRUN_FILE="E2ETests_iphonesimulator11.1-x86_64.xctestrun"
UNIT_TESTRUN_FILE="NexmoConversation_iphonesimulator11.1-x86_64.xctestrun"

E2E_SCHEME_NAME="E2ETests"
UNITTEST_SCHEME_NAME="NexmoConversation"

XCODE="/Applications/Xcode/9.1/Xcode.app/Contents/Developer"
REPO="git@github.com:Nexmo/conversation-ios-sdk.git"

def simpleParseBuildLogForErrors(logfile){
    sh "! cat \"${logfile}\" | grep -q 'Early unexpected exit' "
    sh "! cat \"${logfile}\" | grep -q 'Fatal error:' "
    sh "! cat \"${logfile}\" | grep -q 'Fatal access' "
    sh "! cat \"${logfile}\" | grep -q 'Unhandled error:' "
}

properties(
    [
        parameters(
            [
                booleanParam(defaultValue: false, description: '', name: 'cleanBuild'),
                booleanParam(defaultValue: true, description: '', name: 'unitTests'),
                booleanParam(defaultValue: false, description: '', name: 'e2eTests'),

                string(defaultValue: "", description: '', name: 'ips_url'),
                string(defaultValue: "", description: '', name: 'socket_url'),
                string(defaultValue: "", description: '', name: 'rest_url'),
                string(defaultValue: "", description: '', name: 'token_url'),
                string(defaultValue: "", description: '', name: 'app_id'),

                credentials(defaultValue: "", description: '', name: 'githubCred', credentialType: "Username with password", required: true)
            ]
        ),
        pipelineTriggers([])
    ]
)

pipeline{
    agent none
    options { disableConcurrentBuilds() }
    
    parameters {
        booleanParam(defaultValue: false, description: '', name: 'cleanBuild')
        booleanParam(defaultValue: true, description: '', name: 'unitTests')
        booleanParam(defaultValue: false, description: '', name: 'e2eTests')

        string(defaultValue: "", description: '', name: 'ips_url')
        string(defaultValue: "", description: '', name: 'socket_url')
        string(defaultValue: "", description: '', name: 'rest_url')
        string(defaultValue: "", description: '', name: 'token_url')
        string(defaultValue: "", description: '', name: 'app_id')

        credentials(defaultValue: "", description: '', name: 'githubCred', credentialType: "Username with password", required: true)
    }
    
    stages {
        stage('Clean') {
            agent { label 'osx' }

            when {
                expression { params.cleanBuild == true }
            }
            
            steps {
                cleanWs()
            }
        }
        
        stage('Preparation') { // for display purposes
            agent { label 'osx' }
            
            environment {
                  // Needed for rbenv, should tidy up 
                  PATH = "/usr/local/bin:$PATH"
            }
        
            steps {
                // Setup Ruby tools
                        sh 'rbenv local 2.3.0'
                        sh 'gem install slather'
                        sh 'gem install xcpretty'
                
                // Setup Python tools
                sh 'virtualenv localpy'
                sh 'source localpy/bin/activate'
                sh 'localpy/bin/pip install xunitmerge'

                // cleanup previous simulators 
                sh 'killall "com.apple.CoreSimulator.CoreSimulatorService" || true'

            }
        }
        
        stage('Build') {
            agent { label 'osx' }
            
            environment {
                  // Needed for swiftlint, should tidy up 
                  PATH = "/usr/local/bin:$PATH"
                  DEVELOPER_DIR = "${XCODE}"
                }
            
            steps {
                script {
                    testruns = [
                        [UNITTEST_SCHEME_NAME, params.unitTests],
                        [E2E_SCHEME_NAME, params.e2eTests]
                    ].findAll { it[1] == true }.collect { it[0] }

                    testruns.each { scheme -> 
                        sh "/usr/bin/xcodebuild build-for-testing -scheme ${scheme} -workspace NexmoConversation.xcworkspace -configuration Debug build \"DEVELOPMENT_TEAM=nexmo inc.\" -enableCodeCoverage YES -destination \"platform=iOS Simulator,name=iPhone ${DEVICE_VER},OS=${SDK_VER}\" " 
                        
                    }
                }
            }
        }

        stage("UnitTests") {
            agent { label 'osx' }

            environment {
                LANG="en_US.UTF-8"
                LANGUAGE="en_US.UTF-8"
                LC_ALL="en_US.UTF-8"
                DEVELOPER_DIR = "${XCODE}"
                PATH = "/usr/local/bin:$PATH"
            }

            when {
                expression { params.unitTests == true }
            }

            steps {
                sh "/usr/bin/xcodebuild test-without-building -xctestrun \"${BUILD_DIR}${UNIT_TESTRUN_FILE}\" -enableCodeCoverage YES -configuration Debug \"DEVELOPMENT_TEAM=nexmo inc.\" -destination \"platform=iOS Simulator,name=iPhone ${DEVICE_VER},OS=${SDK_VER}\"  -verbose 2>&1 | tee xcodebuild_unittest.log | /usr/local/bin/xcpretty -r junit -o unittests_results.xml"

                simpleParseBuildLogForErrors("xcodebuild_unittest.log")

                // Gather converage
                sh "/usr/local/bin/slather coverage --build-directory ${BUILD_DIR} --output-directory slather/unittest/ --jenkins --cobertura-xml --ignore Tests/ --scheme NexmoConversation --workspace NexmoConversation.xcworkspace NexmoConversation.xcodeproj " 
            }

            post {
                always {
                    sh 'killall "com.apple.CoreSimulator.CoreSimulatorService"'

                    // Merge and upload test reports 
                    junit 'unittests_results.xml'

                    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'slather/unittest/cobertura.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, zoomCoverageChart: false
                }
            }

        }
        
        stage("Testing") {
            agent { label 'osx' }
            
            environment {
                LANG="en_US.UTF-8"
                LANGUAGE="en_US.UTF-8"
                LC_ALL="en_US.UTF-8"
                DEVELOPER_DIR = "${XCODE}"
            }

            when {
                expression { params.e2eTests == true }
            }
                    
            steps {

                // Setup Envs in xctestrun file 
                script {
                    envs = [
                        "add ${E2E_SCHEME_NAME}:TestingEnvironmentVariables:token_url string ${params.token_url}",
                        "add ${E2E_SCHEME_NAME}:TestingEnvironmentVariables:app_id string ${params.app_id}",
                        "add ${E2E_SCHEME_NAME}:TestingEnvironmentVariables:ips_url string ${params.ips_url}",
                        "add ${E2E_SCHEME_NAME}:TestingEnvironmentVariables:socket_url string ${params.socket_url}",
                        "add ${E2E_SCHEME_NAME}:TestingEnvironmentVariables:rest_url string ${params.rest_url}"
                    ]

                    envs.eachWithIndex { item, index -> 
                        sh "/usr/libexec/PlistBuddy -c \"${item}\" \"${BUILD_DIR}${TESTRUN_FILE}\" "
                    }
                }

                // Run tests suites individually 
                script {
                    modules = [
                        "JoinTest",
                        "TextTest",
                        "CreateConversationTest",
                        "InviteTest",
                        "ImageTest",
                        "TypingTest",
                        "GetConversationEventsTest",
                        "DeleteEventTest",
                        "KickTest",
                        "GetConversationTest",
                        "GetUserConversationsTest",
                        "UserTest"
                    ]

                    modules.eachWithIndex { item, index -> 
                        retry(3){
                            timestamp = UUID.randomUUID().toString()

                            sh "/usr/bin/xcodebuild test-without-building -xctestrun \"${BUILD_DIR}${TESTRUN_FILE}\" -enableCodeCoverage YES" +\
                            " -configuration Debug \"DEVELOPMENT_TEAM=nexmo inc.\" -destination \"platform=iOS Simulator,name=iPhone ${DEVICE_VER},OS=${SDK_VER}\" " +\
                            " -verbose -only-testing:${E2E_SCHEME_NAME}/${item} 2>&1 | tee xcodebuild${index}${timestamp}.log | /usr/local/bin/xcpretty -r junit -o JUnit${index}.xml"

                            simpleParseBuildLogForErrors("xcodebuild${index}${timestamp}.log")

                            // Gather converage
                            sh "/usr/local/bin/slather coverage --build-directory ${BUILD_DIR} --output-directory slather/${index}/ --jenkins --cobertura-xml --ignore Tests/ --scheme NexmoConversation --workspace NexmoConversation.xcworkspace NexmoConversation.xcodeproj " 
                        }
                    }
                }
            }

            post {
                always {
                    sh 'killall "com.apple.CoreSimulator.CoreSimulatorService"'

                    // Merge and upload test reports 
                    sh 'localpy/bin/xunitmerge JUnit*.xml final.xml'
                    junit 'final.xml'

                    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'slather/*/cobertura.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, zoomCoverageChart: false
                }
            }
        }
    }
}
